// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static String getEnv(String key) {
    final value = dotenv.env[key];
    if (value == null) throw Exception('Missing $key in .env file');
    return value;
  }

  static final FirebaseOptions web = FirebaseOptions(
    apiKey: getEnv('WEB_API_KEY'),
    appId: getEnv('WEB_APP_ID'),
    messagingSenderId: getEnv('WEB_MESSAGING_SENDER_ID'),
    projectId: getEnv('WEB_PROJECT_ID'),
    authDomain: getEnv('WEB_AUTH_DOMAIN'),
    storageBucket: getEnv('WEB_STORAGE_BUCKET'),
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: getEnv('ANDROID_API_KEY'),
    appId: getEnv('ANDROID_APP_ID'),
    messagingSenderId: getEnv('ANDROID_MESSAGING_SENDER_ID'),
    projectId: getEnv('ANDROID_PROJECT_ID'),
    storageBucket: getEnv('ANDROID_STORAGE_BUCKET'),
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: getEnv('IOS_API_KEY'),
    appId: getEnv('IOS_APP_ID'),
    messagingSenderId: getEnv('IOS_MESSAGING_SENDER_ID'),
    projectId: getEnv('IOS_PROJECT_ID'),
    storageBucket: getEnv('IOS_STORAGE_BUCKET'),
    iosBundleId: getEnv('IOS_BUNDLE_ID'),
  );

  static final FirebaseOptions macos = FirebaseOptions(
    apiKey: getEnv('MACOS_API_KEY'),
    appId: getEnv('MACOS_APP_ID'),
    messagingSenderId: getEnv('MACOS_MESSAGING_SENDER_ID'),
    projectId: getEnv('MACOS_PROJECT_ID'),
    storageBucket: getEnv('MACOS_STORAGE_BUCKET'),
    iosBundleId: getEnv('MACOS_BUNDLE_ID'),
  );

  static final FirebaseOptions windows = FirebaseOptions(
    apiKey: getEnv('WIN_API_KEY'),
    appId: getEnv('WIN_APP_ID'),
    messagingSenderId: getEnv('WIN_MESSAGING_SENDER_ID'),
    projectId: getEnv('WIN_PROJECT_ID'),
    authDomain: getEnv('WIN_AUTH_DOMAIN'),
    storageBucket: getEnv('WIN_STORAGE_BUCKET'),
  );
}
